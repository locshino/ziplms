<?php

namespace App\Listeners;

use Illuminate\Auth\Events\Login;
use Filament\Notifications\Notification;
use Carbon\Carbon;
use Auth;
use App\Models\Course;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;

class SendLoginNotification implements ShouldQueue
{
    use InteractsWithQueue;
    public function __construct()
    {
        //
    }

    /**
     * Handle the event.
     */
    public function handle(Login $event): void
    {
        // N·∫øu session ƒë√£ ƒë√°nh d·∫•u 'login_notification_sent', kh√¥ng g·ª≠i th√¥ng b√°o n·ªØa
        if (session()->pull('login_notification_sent', false)) {
            return;
        }
        // ƒê√°nh d·∫•u session ƒë√£ g·ª≠i th√¥ng b√°o l·∫ßn n√†y
        session()->put('login_notification_sent', true);
        // L·∫•y user hi·ªán t·∫°i
        $user = Auth::user();
        if (!$user) {

            return;
        }
        // th·ªùi ƒëi·ªÉm hi·ªán t·∫°i

        $now = now();
        // L·∫•y danh s√°ch kh√≥a h·ªçc t√πy role
        if ($user->hasRole('teacher')) {
            // N·∫øu l√† gi√°o vi√™n: l·∫•y t·∫•t c·∫£ course m√† h·ªç l√† teacher
            $courses = Course::where('teacher_id', $user->id)
                ->with([
                    'quizzes' => function ($query) use ($now) {
                        // Ch·ªâ l·∫•y quiz ch∆∞a h·∫øt h·∫°n
                        $query->wherePivot('end_at', '>=', $now);
                    },
                    'assignments' => function ($query) use ($now) {
                        // Ch·ªâ l·∫•y assignment ch∆∞a h·∫øt h·∫°n
                        $query->wherePivot('end_at', '>=', $now);
                    },
                ])
                ->get();
        } else {
            // N·∫øu l√† student: l·∫•y t·∫•t c·∫£ course m√† student ƒëang tham gia
            $courses = $user->courses()
                ->with([
                    'quizzes' => function ($query) use ($now) {
                        $query->wherePivot('end_at', '>=', $now);
                    },
                    'assignments' => function ($query) use ($now) {
                        $query->wherePivot('end_at', '>=', $now);
                    },
                ])
                ->get();
            ;
        }
        // Ch·ªâ x·ª≠ l√Ω th√¥ng b√°o cho teacher ho·∫∑c student
        if ($user->hasRole('teacher') || $user->hasRole('student')) {
            // l∆∞u c√°c th√¥ng b√°o deadline s·∫Øp t·ªõi
            $messages = [];
            foreach ($courses as $course) {




                // Ki·ªÉm tra quiz g·∫ßn h·∫øt h·∫°n
                foreach ($course->quizzes as $quiz) {
                    // Ki·ªÉm tra xem student ƒë√£ attempt quiz ch∆∞a
                    $hasAttempt = \App\Models\QuizAttempt::where('quiz_id', $quiz->id)
                        ->where('student_id', $user->id)
                        ->exists();

                    // N·∫øu ch∆∞a attempt v√† quiz c√≥ end_at trong 7 ng√†y t·ªõi
                    if (
                        !$hasAttempt &&
                        $quiz->pivot->start_at &&
                        $quiz->pivot->end_at &&
                        $quiz->pivot->end_at->between(
                            Carbon::now(),
                            Carbon::now()->addWeek()
                        )
                    ) {
                        $endAt = $quiz->pivot->end_at;

                        $diffInDays = round(now()->diffInDays($endAt, false));
                        $diffInHours = round(now()->diffInHours($endAt, false));

                        if ($diffInDays < 1) {
                            $timeLeft = "c√≤n {$diffInHours} gi·ªù";
                        } else {
                            $timeLeft = "c√≤n {$diffInDays} ng√†y";

                        }
                        $messages[] = "<strong>Quiz:</strong> {$quiz->title} (h·∫°n: {$endAt->format('d/m/Y')} - {$timeLeft})";
                    }
                }

                // Ki·ªÉm tra assignment g·∫ßn h·∫øt h·∫°n
                foreach ($course->assignments as $assignment) {
                    // Ki·ªÉm tra student ƒë√£ submit ch∆∞a
                    $hasSubmission = \App\Models\Submission::query()
                        ->where('assignment_id', $assignment->id)
                        ->where('student_id', $user->id)
                        ->exists();
                    $endAt = $assignment->pivot->end_at;
                    // N·∫øu ch∆∞a submit v√† end_at trong 7 ng√†y t·ªõi
                    if (
                        !$hasSubmission &&
                        $assignment->pivot->end_at &&
                        $assignment->pivot->end_at->between(
                            Carbon::now(),
                            Carbon::now()->addWeek()
                        )
                    ) {

                        $diffInDays = round(now()->diffInDays($endAt, false));
                        $diffInHours = round(now()->diffInHours($endAt, false));

                        if ($diffInDays < 1) {
                            $timeLeft = "c√≤n {$diffInHours} gi·ªù";
                        } else {
                            $timeLeft = "c√≤n {$diffInDays} ng√†y";

                        }

                        $messages[] = "<strong>Assignment:</strong> {$assignment->title} (h·∫°n: {$endAt->format('d/m/Y')} - {$timeLeft})";
                    }
                }

            }
            // N·∫øu c√≥ b·∫•t k·ª≥ deadline n√†o s·∫Øp t·ªõi, g·ª≠i th√¥ng b√°o duy nh·∫•t
            if (!empty($messages)) {
                $body = implode("<br>", $messages);

                Notification::make()
                    ->title('üìå C√°c deadline s·∫Øp t·ªõi trong 7 ng√†y')
                    ->body($body)
                    ->success()
                    ->send()// g·ª≠i notification tr·ª±c ti·∫øp
                    ->sendToDatabase($user);// l∆∞u v√†o database cho user

            }
        }

    }
}
